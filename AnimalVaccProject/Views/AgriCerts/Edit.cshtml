@model AnimalVaccProject.Models.tbl_AgriCert

@{
    ViewBag.Title = "Edit";
}
@*<style>
    .custom-combobox {
        position: relative;
        display: inline-block;
    }

    .custom-combobox-toggle {
        position: absolute;
        top: 0;
        bottom: 0;
        margin-left: -1px;
        padding: 0;
    }

    .custom-combobox-input {
        margin: 0;
        padding: 5px 10px;
    }
    .ui-corner-all, .ui-corner-bottom, .ui-corner-right, .ui-corner-br {
    border-bottom-left-radius: 3px;
}
.ui-corner-all, .ui-corner-top, .ui-corner-right, .ui-corner-tr {
    border-top-left-radius: 3px;
}
</style>*@

<h2>تعديل حيازة حيوانية</h2>
<div>
    @Html.ActionLink("عودة لقائمة الحيازات الزراعية", "Index")
</div>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.AgriCertId)

        <div class="form-group">
            <div class="col-md-10">
             @Html.DisplayFor(model => model.AgriCertNo)
            </div>
            @Html.LabelFor(model => model.AgriCertNo, htmlAttributes: new { @class = "control-label col-md-2" })

        </div>


        <div class="form-group">
            <div class="col-md-10 ui-widget">
                @Html.DropDownList("FarmerId", null, htmlAttributes: new { @class = "form-control custom.combobox", size = "1", @disabled = "disabled"  })
                @Html.ValidationMessageFor(model => model.FarmerId, "", new { @class = "text-danger" })
            </div>
            <lable class="control-label col-md-2">إسم المربي</lable>
        </div>
        <div class="form-group">
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Type, new SelectList(
                  new List<Object>{
                       new { value = "حائز أساسي" , text = "حائز أساسي"  },
                       new { value = "حائز ملحق" , text = "حائز ملحق" }
                    },
                  "value",
                  "text",
                   Model.Type), new { @class = "form-control", style = "width:150px;", size = "1", @disabled = "disabled" })

                @*@Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control" } })*@

            </div>
            <lable class="control-label col-md-2">صفحة الحائز</lable>

        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.IssueDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IssueDate, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.IssueDate, htmlAttributes: new { @class = "control-label col-md-2" })

        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExpDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExpDate, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.ExpDate, htmlAttributes: new { @class = "control-label col-md-2" })

        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="btnSmt" type="submit" value="حفظ التغيرات" class="btn btn-success" />
            </div>
        </div>
    </div>
}

@*<div>
    @Html.ActionLink("عودة لقائمة الحيازات", "Index")
</div>*@
@section scripts{
    <script>
    $(function () {

        $("#IssueDate").datepicker();
        $("#ExpDate").datepicker();

      $("#btnSmt").on("click", function () {

          var start = $('#IssueDate').datepicker('getDate');
          var end = $('#ExpDate').datepicker('getDate');
          var days = (end - start) / 1000 / 60 / 60 / 24;
          //var dayDiff = Math.ceil((today - date) / (1000 * 60 * 60 * 24));
          var days = (end - start) / 1000 / 60 / 60 / 24
          if (days<0)
                  {
              alert("الرجاء التأكد من أن تاريخ الإنتهاء أقل من تاريخ الإصدار " + "(" + days + ")");
                      return false;
                  }

      });
  });
    </script>

@*<script>
  (function( $ ) {
    $.widget( "custom.combobox", {
      _create: function() {
        this.wrapper = $( "<span>" )
          .addClass( "custom-combobox" )
          .insertAfter( this.element );

        this.element.hide();
        this._createAutocomplete();
        this._createShowAllButton();
      },

      _createAutocomplete: function() {
        var selected = this.element.children( ":selected" ),
          value = selected.val() ? selected.text() : "";

        this.input = $( "<input>" )
          .appendTo( this.wrapper )
          .val( value )
          .attr( "title", "" )
          .addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
          .autocomplete({
            delay: 0,
            minLength: 0,
            source: $.proxy( this, "_source" )
          })
          .tooltip({
            tooltipClass: "ui-state-highlight"
          });

        this._on( this.input, {
          autocompleteselect: function( event, ui ) {
            ui.item.option.selected = true;
            this._trigger( "select", event, {
              item: ui.item.option
            });
          },

          autocompletechange: "_removeIfInvalid"
        });
      },

      _createShowAllButton: function() {
        var input = this.input,
          wasOpen = false;

        $( "<a>" )
          .attr( "tabIndex", -1 )
          .attr( "title", "Show All Items" )
          .tooltip()
          .appendTo( this.wrapper )
          .button({
            icons: {
              primary: "ui-icon-triangle-1-s"
            },
            text: false
          })
          .removeClass( "ui-corner-all" )
          .addClass( "custom-combobox-toggle ui-corner-right" )
          .mousedown(function() {
            wasOpen = input.autocomplete( "widget" ).is( ":visible" );
          })
          .click(function() {
            input.focus();

            // Close if already visible
            if ( wasOpen ) {
              return;
            }

            // Pass empty string as value to search for, displaying all results
            input.autocomplete( "search", "" );
          });
      },

      _source: function( request, response ) {
        var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
        response( this.element.children( "option" ).map(function() {
          var text = $( this ).text();
          if ( this.value && ( !request.term || matcher.test(text) ) )
            return {
              label: text,
              value: text,
              option: this
            };
        }) );
      },

      _removeIfInvalid: function( event, ui ) {

        // Selected an item, nothing to do
        if ( ui.item ) {
          return;
        }

        // Search for a match (case-insensitive)
        var value = this.input.val(),
          valueLowerCase = value.toLowerCase(),
          valid = false;
        this.element.children( "option" ).each(function() {
          if ( $( this ).text().toLowerCase() === valueLowerCase ) {
            this.selected = valid = true;
            return false;
          }
        });

        // Found a match, nothing to do
        if ( valid ) {
          return;
        }

        // Remove invalid value
        this.input
          .val( "" )
          .attr( "title", value + " didn't match any item" )
          .tooltip( "open" );
        this.element.val( "" );
        this._delay(function() {
          this.input.tooltip( "close" ).attr( "title", "" );
        }, 2500 );
        this.input.autocomplete( "instance" ).term = "";
      },

      _destroy: function() {
        this.wrapper.remove();
        this.element.show();
      }
    });
  })( jQuery );

  $(function() {
      $("#FarmerId").combobox();
    $( "#toggle" ).click(function() {
        $("#FarmerId").toggle();
    });
  });
</script>*@
}